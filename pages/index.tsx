import Head from 'next/head';
import AppHeader from '../src/components/Home/AppHeader';
import { Box, Container, CssBaseline, Divider } from '@mui/material';
import Campaign from '../src/components/Home/Campaign';
import axios from '../src/config/axios';
import { Fragment, useEffect, useState } from 'react';
import FeaturedServices from '../src/components/Home/FeaturedServices';
import { AutoFixHigh } from '@mui/icons-material';
import Categories from '../src/components/Home/Categories';
import Stores from '../src/components/Home/Stores';
import Promo from '../src/components/Home/Promo';
import Products from '../src/components/Home/Products';
import { newProducts } from '../src/helper/products';
import Auth from '../src/components/Auth';
import { featuredServiceData } from '../src/components/Home/constants';

type HomeProps = {
  getCampaigns: {
    error: boolean;
    result: any[];
  };
  getSupplier: {
    error: boolean;
    result: any[];
  };
  getProducts: {
    error: boolean;
    result: { [key: string]: any };
  };
  getPromotedProducts: {
    error: boolean;
    result: { [key: string]: any };
  };
  getMenu: {
    error: boolean;
    result: { [key: string]: any };
  };
};

export default function Home({
  getCampaigns,
  getSupplier,
  getProducts,
  getPromotedProducts,
  getMenu,
}: HomeProps) {
  const [supplier, setSupplier] = useState<any[]>([]);
  const [products, setProducts] = useState<any[]>([]);
  const [promotedProducts, setPromotedProducts] = useState<any[]>([]);
  const [menu, setMenu] = useState<any[]>([]);
  const [isProductLoading, setIsProductLoading] = useState<boolean>(true);
  const [currentProductPage, setCurrentProductPage] = useState<number>(1);
  const [lastProductPage, setLastProductPage] = useState<number>(0);

  const onShowMoreProductBtnClicked = () => {
    const nextProductPage = currentProductPage + 1;
    if (!isProductLoading && nextProductPage <= lastProductPage) {
      setIsProductLoading(true);
      axios()
        .post(`/market/product?page=${nextProductPage}`, {
          limit: 12,
          type: 'all',
        })
        .then(({ data }) => {
          setProducts(prevProducts => [
            ...prevProducts,
            ...newProducts(data.result.data),
          ]);
          setCurrentProductPage(nextProductPage);
        })
        .finally(() => setIsProductLoading(false));
    }
  };

  useEffect(() => {
    if (getSupplier && !getSupplier.error) {
      const supplier = getSupplier.result.map(m => {
        return {
          name: m.cnama_supplier,
          imageUri: `https://cdn.kerbel.in/assets/suplier/${m.cimg_supplier}`,
          marketName: m.calamat_supplier,
          block: 'A1 - B2',
          location: 'Makassar',
        };
      });
      setSupplier(supplier);
    }
  }, [getSupplier]);

  useEffect(() => {
    if (getMenu && !getMenu.error) {
      const newMenu = getMenu.result.map((gM: { ckelas: any; cicon: any }) => {
        return {
          name: gM.ckelas,
          imageUri: `https://cdn.kerbel.in/api/icon/market/${gM.cicon}`,
          url: '',
        };
      });
      setMenu(newMenu);
    }
  }, [getMenu]);

  useEffect(() => {
    if (getProducts && !getProducts.error && getProducts.result.data.length) {
      setProducts(newProducts(getProducts.result.data));
      setLastProductPage(getProducts.result.last_page);
      setIsProductLoading(false);
    }
  }, [getProducts]);

  useEffect(() => {
    if (
      getPromotedProducts &&
      !getPromotedProducts.error &&
      getPromotedProducts.result.data.length
    ) {
      setPromotedProducts(newProducts(getPromotedProducts.result.data));
    }
  }, [getPromotedProducts]);

  return (
    <Fragment>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <title>KerPas</title>
      </Head>
      <CssBaseline />
      <AppHeader />
      <Container maxWidth={'lg'} sx={{ px: '0!important', overflow: 'hidden' }}>
        <Box my={8} py={1}>
          <Campaign data={getCampaigns.result} />
          <FeaturedServices data={featuredServiceData} />
          <Categories data={menu} />
          <Divider />
          <Promo data={promotedProducts} />
          <Divider />
          <Stores data={supplier} />
          <Divider />
          <Products
            data={products}
            onShowMoreBtnClicked={onShowMoreProductBtnClicked}
            isLoading={isProductLoading}
            isLastProductReached={currentProductPage + 1 > lastProductPage}
          />
        </Box>
      </Container>
      <Auth />
    </Fragment>
  );
}

export const getStaticProps = async () => {
  const { data: getCampaigns } = await axios().post('/market/ads/campaign', {
    category: 7,
  });
  const { data: getSupplier } = await axios().get('/market/supplier');
  const { data: getProducts } = await axios().post('/market/product', {
    limit: 12,
    type: 'all',
  });
  const { data: getPromotedProducts } = await axios().post('/market/product', {
    limit: 12,
    type: 'promo',
  });
  const { data: getMenu } = await axios().get('/market/menu');

  return {
    props: {
      getCampaigns,
      getSupplier,
      getProducts,
      getPromotedProducts,
      getMenu,
    },
  };
};
